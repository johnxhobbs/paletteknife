% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autopal.R
\name{autocol}
\alias{autocol}
\title{Auto-Assign Colour Palette}
\usage{
autocol(
  x,
  set = "",
  alpha = NA,
  limits = NA,
  na_colour = NA,
  bias = 1,
  legend_len
)
}
\arguments{
\item{x}{Vector to be mapped to colours}

\item{set}{Colour set to use - 'bright' or 'muted' for categorical, or specify directly ('turbo', 'viridis', 'inferno')}

\item{alpha}{Transparency as a single value or as another vector (recycled to fill) - if it is a vector, all values are scaled from 0:max(alpha) -> transparent:opaque. Single values must be in range 0-1. If NA no alpha hex is added.}

\item{limits}{Colour scale limits as absolute range \code{c(0,10)}, or as percentile to remove outliers \code{c('0\%','99.9\%')}, or NA = all}

\item{na_colour}{Colour to represent NA, defaults to NA (do not plot)}

\item{bias}{Skew to apply to colour-ramp (2 increases resolution at low end, 0.5 at the high end)}

\item{legend_len}{Continuous legend target size}
}
\description{
Create a ready-to-go vector of colours and pretty legend
}
\details{
Helper function for using colours in R's default \code{plot} and \code{legend}. Colours
from built-in palettes are automatically scaled to return a vector of colours
with legend information included as attributes.

A discrete palette is used for factor and character inputs whilst a
continuous palette is used for integer and numeric.

Colour sets built-in so far are:
\itemize{
\item All of the continuous palette forked from the \code{viridisLite} package maintained by Simon Garnier.

\code{cividis} \code{inferno} \code{magma} \code{mako} \code{plasma} \code{rocket}
\code{turbo} \code{viridis}
\item All of the palettes incldued in RColorBrewer

\code{Accent} \code{Blues} \code{BrBG} \code{BuGn} \code{BuPu} \code{Dark2} \code{GnBu}
\code{Greens} \code{Greys} \code{Oranges} \code{OrRd} \code{Paired} \code{Pastel1}
\code{Pastel2} \code{PiYG} \code{PRGn} \code{PuBu} \code{PuBuGn} \code{PuOr} \code{PuRd}
\code{Purples} \code{RdBu} \code{RdGy} \code{RdPu} \code{RdYlBu} \code{RdYlGn}
\code{Reds} \code{Set1} \code{Set2} \code{Set3} \code{Spectral} \code{YlGn} \code{YlGnBu}
\code{YlOrBr} \code{YlOrRd} ``
\item Sasha Trubetskoy  (2017): \emph{List of 20 Simple, Distinct Colors}

\code{sasha}
}

Custom limits can be specified, in two ways:
\itemize{
\item percentile limits \code{c('5\%','90\%')}: this is essential for clamping down on outliers which compress the colour scale
\item absolute limits \code{c(0,10)}: useful if multiple plots using the same range are required for cross-comparison
\item default behaviour \code{limits = NA}: adjust to exactly fit input range
}

The skew of the colourscale can be adjusted with \code{bias}, for example if \code{x}
has an exponential distribution, a bias value > 1 will bring out contrast at
the low end.
}
\examples{
# Try scales which inlcude NA in both colour and alpha channel
# Note, a crude fix to reverse the palette order, and changing the autolegend labels
with(airquality, plot(Temp, col=autocol(x=-Solar.R, set='Spectral', alpha = Ozone, na_colour = 'black'), pch=16, cex = sqrt(Wind) ))
  .autocol_legend[[1]] = -.autocol_legend[[1]]
  autolegend(bty = 'n', horiz = T)

plot(iris$Sepal.Length, iris$Petal.Length, col = autocol(iris$Petal.Width, 'PuBuGn', alpha = 0.8, bias = 1.5), cex = 3, pch = 16 )
  autolegend('topleft', title = 'Petal.Width', ncol = 2)

# Here we want a summary plot ordered by level, so need to create a colour vector to match
mixedbag = as.factor(sample(letters,1000,replace=T))
  plot(x = mixedbag, y = rnorm(1000), col = autocol(levels(mixedbag)))
  autolegend('bottom', ncol = 9, bty = 'n')

}
